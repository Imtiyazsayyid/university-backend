// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

model Admin {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  email     String @unique

  password   String
  gender     Gender
  profileImg String? @db.Text
  address    String? @db.Text

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Course {
  id       Int    @id @default(autoincrement())
  name     String
  abbr     String
  duration Int // years

  description          String? @db.Text
  programOutcome       String? @db.Text
  departmentalStrength String? @db.Text
  aboutFacility        String? @db.Text
  eligibilty           String? @db.Text
  significance         String? @db.Text
  vision               String? @db.Text
  mission              String? @db.Text
  technicalActivities  String? @db.Text

  semesters Semester[]
  bacthes   Batch[]
  students  Student[]
  documents CourseStudentDocuments[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Semester {
  id        Int    @id @default(autoincrement())
  semNumber Int
  duration  Int
  courseId  Int
  course    Course @relation(fields: [courseId], references: [id])

  subjects Subject[]
  batches  BatchSemesterMap[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Subject {
  id            Int         @id @default(autoincrement())
  name          String
  abbr          String
  code          String      @unique
  subjectTypeId Int
  subjectType   SubjectType @relation(fields: [subjectTypeId], references: [id])
  credits       Int
  semesterId    Int
  semester      Semester    @relation(fields: [semesterId], references: [id])

  units            Unit[]
  divisionTeachers DivisionSubjectTeacher[]
  assignments      Assignment[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Unit {
  id          Int     @id @default(autoincrement())
  number      Int
  name        String
  description String? @db.Text
  subjectId   Int
  subject     Subject @relation(fields: [subjectId], references: [id])

  unitMaterial UnitMaterial[]
  unitQuizes   unitQuiz[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model UnitMaterial {
  id          Int     @id @default(autoincrement())
  name        String
  link        String  @db.Text
  description String? @db.Text

  unitId Int
  unit   Unit @relation(fields: [unitId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model SubjectType {
  id   Int    @id @default(autoincrement())
  name String

  subjects Subject[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Batch {
  id   Int @id @default(autoincrement())
  year Int

  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  accessibleSemesters BatchSemesterMap[]
  divisions           Division[]
  students            Student[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Division {
  id Int @id @default(autoincrement())

  name    String @db.VarChar(5)
  batchId Int
  batch   Batch  @relation(fields: [batchId], references: [id])

  subjectTeachers DivisionSubjectTeacher[]
  students        Student[]
  assignments     Assignment[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model BatchSemesterMap {
  id Int @id @default(autoincrement())

  semesterId Int
  semester   Semester @relation(fields: [semesterId], references: [id])

  batchId Int
  batch   Batch @relation(fields: [batchId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Teacher {
  id        Int         @id @default(autoincrement())
  firstName String
  lastName  String
  email     String      @unique
  roleId    Int
  role      TeacherRole @relation(fields: [roleId], references: [id])

  password   String
  gender     Gender
  profileImg String? @db.Text
  address    String? @db.Text

  qualification String? @db.Text
  experience    Int?
  about         String? @db.Text

  awardsAndRecognition          String? @db.Text
  guestSpeakerAndResourcePerson String? @db.Text
  participationInCWTP           String? @db.Text // Conferences Workshops & Training Programs
  researchPublications          String? @db.Text
  certificationCourses          String? @db.Text
  booksOrChapter                String? @db.Text
  professionalMemberships       String? @db.Text

  divisionSubjects       DivisionSubjectTeacher[]
  assignments            Assignment[]
  eventsWhereHead        Event[]
  eventWhereOrganiser    EventOrganiser[]
  eventWhereParticipants EventParticipant[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model TeacherRole {
  id       Int       @id @default(autoincrement())
  name     String
  teachers Teacher[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model DivisionSubjectTeacher {
  id        Int     @id @default(autoincrement())
  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])

  teacherId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  divisionId Int
  division   Division @relation(fields: [divisionId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Student {
  id Int @id @default(autoincrement())

  rollNumber String  @unique
  firstName  String
  lastName   String
  email      String  @unique
  password   String
  gender     Gender
  profileImg String? @db.Text
  address    String? @db.Text

  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  batchId Int
  batch   Batch @relation(fields: [batchId], references: [id])

  divisionId Int
  division   Division @relation(fields: [divisionId], references: [id])

  uploadedStudentDocuments  UploadedStudentDocument[]
  unitQuizQuestionResponses unitQuizQuestionResponses[]
  assignmentResponses       AssignmentQuestionResponses[]
  submittedAssignments      AssignmentsSubmitted[]
  assignmentUploads         AssignmentUploads[]
  eventWhereParticipants    EventParticipant[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model StudentDocument {
  id   Int    @id @default(autoincrement())
  name String

  courses                  CourseStudentDocuments[]
  uploadedStudentDocuments UploadedStudentDocument[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model CourseStudentDocuments {
  id Int @id @default(autoincrement())

  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  documentId Int
  document   StudentDocument @relation(fields: [documentId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model UploadedStudentDocument {
  id Int @id @default(autoincrement())

  studentId Int
  student   Student @relation(fields: [studentId], references: [id])

  documentId Int
  document   StudentDocument @relation(fields: [documentId], references: [id])

  url String @db.Text

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model unitQuiz {
  id Int @id @default(autoincrement())

  name   String
  unitId Int
  unit   Unit   @relation(fields: [unitId], references: [id])

  questions unitQuizQuestion[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model unitQuizQuestion {
  id Int @id @default(autoincrement())

  unitQuizId Int
  unitQuiz   unitQuiz @relation(fields: [unitQuizId], references: [id])
  question   String   @db.VarChar(255)
  order      Int      @default(0)

  options   unitQuizQuestionOption[]
  responses unitQuizQuestionResponses[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model unitQuizQuestionOption {
  id Int @id @default(autoincrement())

  unitQuizId         Int
  unitQuizQuestionId Int
  unitQuizQuestion   unitQuizQuestion @relation(fields: [unitQuizQuestionId], references: [id])

  value     String
  isCorrect Boolean @default(false)

  responses unitQuizQuestionResponses[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model unitQuizQuestionResponses {
  id Int @id @default(autoincrement())

  unitQuizId Int

  unitQuizQuestionId Int
  unitQuizQuestion   unitQuizQuestion @relation(fields: [unitQuizQuestionId], references: [id])

  selectedOptionId Int
  selectedOption   unitQuizQuestionOption @relation(fields: [selectedOptionId], references: [id])

  studentId Int
  student   Student @relation(fields: [studentId], references: [id])

  attemptId String @db.VarChar(255)

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Assignment {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(1000)
  divisionId  Int
  division    Division @relation(fields: [divisionId], references: [id])
  teacherId   Int
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  subjectId   Int
  subject     Subject  @relation(fields: [subjectId], references: [id])
  dueDate     DateTime

  questions            AssignmentQuestion[]
  responses            AssignmentQuestionResponses[]
  material             AssignmentMaterial[]
  submittedAssignments AssignmentsSubmitted[]
  assignmentUploads    AssignmentUploads[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model AssignmentQuestion {
  id           Int        @id @default(autoincrement())
  question     String     @db.VarChar(255)
  order        Int        @default(0)
  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  responses AssignmentQuestionResponses[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model AssignmentMaterial {
  id           Int        @id @default(autoincrement())
  material_url String     @db.Text
  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model AssignmentQuestionResponses {
  id                   Int                @id @default(autoincrement())
  answer               String             @db.LongText
  assignmentQuestionId Int
  assignmentQuestion   AssignmentQuestion @relation(fields: [assignmentQuestionId], references: [id])
  studentId            Int
  Student              Student            @relation(fields: [studentId], references: [id])
  assignmentId         Int
  assignment           Assignment         @relation(fields: [assignmentId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model AssignmentUploads {
  id           Int        @id @default(autoincrement())
  material_url String     @db.LongText
  studentId    Int
  Student      Student    @relation(fields: [studentId], references: [id])
  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model AssignmentsSubmitted {
  id           Int        @id @default(autoincrement())
  studentId    Int
  student      Student    @relation(fields: [studentId], references: [id])
  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Event {
  id Int @id @default(autoincrement())

  name        String
  description String
  datetime    DateTime
  eventHeadId Int
  eventFor    EventFor @default(all)
  venue       String?  @db.Text

  finalRegistrationDate DateTime?
  isCompleted           Boolean        @default(false)
  approvalStatus        ApprovalStatus @default(pending)

  eventHead         Teacher            @relation(fields: [eventHeadId], references: [id])
  eventOrganisers   EventOrganiser[]
  eventParticipants EventParticipant[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model EventOrganiser {
  id Int @id @default(autoincrement())

  eventId        Int
  teacherId      Int
  approvalStatus ApprovalStatus @default(pending)
  message        String?

  event   Event   @relation(fields: [eventId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model EventParticipant {
  id Int @id @default(autoincrement())

  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  studentId Int?
  student   Student? @relation(fields: [studentId], references: [id])

  teacherId Int?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum Gender {
  male
  female
  other
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

enum EventFor {
  all
  students
  teachers
}
