// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

model Admin {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  email     String @unique

  password   String
  gender     Gender
  profileImg String? @db.Text
  address    String? @db.Text

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Course {
  id       Int    @id @default(autoincrement())
  name     String
  abbr     String
  duration Int // years

  description          String? @db.Text
  programOutcome       String? @db.Text
  departmentalStrength String? @db.Text
  aboutFacility        String? @db.Text
  eligibilty           String? @db.Text
  significance         String? @db.Text
  vision               String? @db.Text
  mission              String? @db.Text
  technicalActivities  String? @db.Text

  semesters Semester[]
  bacthes   Batch[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Semester {
  id        Int    @id @default(autoincrement())
  semNumber Int
  duration  Int
  courseId  Int
  course    Course @relation(fields: [courseId], references: [id])

  subjects Subject[]
  batches  BatchSemesterMap[]
  

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Subject {
  id            Int         @id @default(autoincrement())
  name          String
  abbr          String
  code          String      @unique
  subjectTypeId Int
  subjectType   SubjectType @relation(fields: [subjectTypeId], references: [id])
  credits       Int
  semesterId    Int
  semester      Semester    @relation(fields: [semesterId], references: [id])

  units         Unit[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Unit {
  id           Int            @id @default(autoincrement())
  number       Int
  name         String
  description  String?        @db.Text
  subjectId    Int
  subject      Subject        @relation(fields: [subjectId], references: [id])
  unitMaterial UnitMaterial[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model UnitMaterial {
  id     Int              @id @default(autoincrement())
  name   String
  link   String           @db.Text
  description  String?        @db.Text
  
  unitId Int
  unit   Unit             @relation(fields: [unitId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model SubjectType {
  id   Int    @id @default(autoincrement())
  name String

  subjects Subject[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Batch {
  id   Int    @id @default(autoincrement())
  year Int    

  courseId Int
  course   Course   @relation(fields: [courseId], references: [id])

  accessibleSemesters BatchSemesterMap[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model BatchSemesterMap {
  id   Int    @id @default(autoincrement())

  semesterId    Int
  semester      Semester    @relation(fields: [semesterId], references: [id])

  batchId    Int
  batch      Batch    @relation(fields: [batchId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum Gender {
  male
  female
  other
}
